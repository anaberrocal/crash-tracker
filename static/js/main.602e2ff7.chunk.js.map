{"version":3,"sources":["assets/crashTracker.png","assets/crashIconLow.png","assets/crashIconHigh.png","util/Predictions.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Predictions","useState","data","setData","loading","setLoading","useEffect","fetch","proxyUrl","then","res","json","result","solution","coordinates","high","forEach","o","push","shape","map","c","key","uuid","latitude","longitude","className","src","crashIconHigh","alt","low","crashIconLow","handleMarkers","App","width","height","zoom","viewport","setViewport","crashTracker","mapboxApiAccessToken","process","mapStyle","onViewportChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,4PCM5B,SAASC,IAAe,IAAD,EACVC,qBADU,mBAC3BC,EAD2B,KACrBC,EADqB,OAEJF,oBAAS,GAFL,mBAE3BG,EAF2B,KAElBC,EAFkB,KAIlCC,qBAAU,WAGNC,MAAMC,yFACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCT,EAAQS,GACRP,GAAW,QAGhB,IAkCL,OACI,8BACMD,GAlCc,WACpB,IAAIS,EAAW,GA4Bd,OA3BAX,EAAKA,KAAKY,YAAYC,KAAKC,SAAQ,SAAAC,GACpCJ,EAASK,KAAKD,EAAEE,MAAML,YAAYM,KAAK,SAAAC,GAAC,OACtC,kBAAC,IAAD,CACAC,IAAKC,MACLC,SAAYH,EAAE,GACdI,UAAaJ,EAAE,IAEd,yBAAKK,UAAU,SACd,yBAAKC,IAAKC,IAAeC,IAAI,kBAAkBH,UAAU,uBAM7DxB,EAAKA,KAAKY,YAAYgB,IAAId,SAAQ,SAAAC,GAChCJ,EAASK,KAAKD,EAAEE,MAAML,YAAYM,KAAK,SAAAC,GAAC,OACtC,kBAAC,IAAD,CACAC,IAAKC,MACLC,SAAYH,EAAE,GACdI,UAAaJ,EAAE,IAEd,yBAAKK,UAAU,SACd,yBAAKC,IAAKI,IAAcF,IAAI,iBAAiBH,UAAU,uBAKrDb,EAKSmB,ICnBVC,MA/Bf,WAAgB,IAAD,EACmBhC,mBAAS,CACvCuB,SAAU,QACVC,WAAY,QACZS,MAAO,QACPC,OAAQ,QACRC,KAAM,KANK,mBACNC,EADM,KACIC,EADJ,KASb,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,UAChB,6BAAK,yBAAKC,IAAKY,IAAcV,IAAI,qBAAqBH,UAAU,SAAhE,IAAyE,yCAAzE,WACA,yBAAKA,UAAU,UAAf,mCAEF,6BACA,kBAAC,IAAD,iBACIW,EADJ,CAEAG,qBAAsBC,iGACtBC,SAAS,wDACTC,iBAAoB,SAAAN,GAClBC,EAAYD,MAGZ,kBAACrC,EAAD,UCnBY4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.602e2ff7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crashTracker.9d350d49.png\";","module.exports = __webpack_public_path__ + \"static/media/crashIconLow.5e53030d.png\";","module.exports = __webpack_public_path__ + \"static/media/crashIconHigh.f28522bd.png\";","import React, { useState, useEffect } from 'react';\nimport { Marker } from 'react-map-gl';\nimport uuid from 'uuid';\nimport crashIconLow from './../assets/crashIconLow.png';\nimport crashIconHigh from './../assets/crashIconHigh.png';\n\nexport default function Predictions() {\n    const [data, setData] = useState();\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n        const targetUrl = \"https://cdn.urbansdk.com/actual_v_prediction.json\";\n        fetch(proxyUrl + targetUrl)\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setData(result)\n              setLoading(false)\n            },\n          )\n      }, [])\n\n      const handleMarkers = () => {\n        let solution = [];\n         data.data.coordinates.high.forEach(o => {\n        solution.push(o.shape.coordinates.map( c => (\n          <Marker \n          key={uuid()}\n          latitude = {c[1]}\n          longitude = {c[0]}\n          >\n           <div className=\"crash\">\n            <img src={crashIconHigh} alt=\"Crash Icon High\" className=\"crashIcon\"/>\n            </div>\n          </Marker>\n        )))\n        })\n      \n        data.data.coordinates.low.forEach(o => {\n          solution.push(o.shape.coordinates.map( c => (\n            <Marker \n            key={uuid()}\n            latitude = {c[1]}\n            longitude = {c[0]}\n            >\n             <div className=\"crash\">\n              <img src={crashIconLow} alt=\"Crash Icon Low\" className=\"crashIcon\"/>\n              </div>\n            </Marker>\n          )))\n          })\n         return solution\n      };\n\n    return (\n        <div>\n            {!loading && handleMarkers()}\n        </div>\n    )\n};","import React, { useState } from 'react';\nimport './App.css';\nimport ReactMapGL from 'react-map-gl';\nimport crashTracker from './../assets/crashTracker.png';\nimport Predictions from '../util/Predictions';\n\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    latitude: 30.3209,\n    longitude: -81.7287,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 12,\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div><img src={crashTracker} alt=\"Crash Tracker icon\" className=\"icon\"/> <strong>Crash</strong>Tracker</div>\n        <div className=\"county\">Duval County's Traffic Tracker</div>\n      </header>\n      <div>\n      <ReactMapGL \n      {...viewport}\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      mapStyle=\"mapbox://styles/anaberrocal/ckbh2i68i03xa1ik9wnzjrwnq\"\n      onViewportChange = {viewport => {\n        setViewport(viewport);\n      }}\n      >\n        <Predictions/>\n      </ReactMapGL>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}